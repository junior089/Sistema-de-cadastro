"""
Script para adicionar o campo 'atendida' na tabela Cadastro
Execute este script ap√≥s fazer backup do banco de dados
"""

import sqlite3
import os
from datetime import datetime


def add_atendida_field():
    """Adiciona o campo atendida na tabela cadastro"""

    # Caminho do banco de dados
    db_path = 'cadastro.db'

    if not os.path.exists(db_path):
        print(f"Erro: Banco de dados {db_path} n√£o encontrado!")
        return False

    try:
        # Conectar ao banco
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()

        # Verificar se a coluna j√° existe
        cursor.execute("PRAGMA table_info(cadastro)")
        columns = [column[1] for column in cursor.fetchall()]

        if 'atendida' in columns:
            print("Campo 'atendida' j√° existe na tabela!")
            return True

        # Adicionar a coluna
        cursor.execute("""
                       ALTER TABLE cadastro
                           ADD COLUMN atendida BOOLEAN DEFAULT FALSE
                       """)

        # Confirmar as mudan√ßas
        conn.commit()

        print("‚úÖ Campo 'atendida' adicionado com sucesso!")
        print("üìä Todos os cadastros existentes foram marcados como 'N√£o Atendida' por padr√£o")

        # Verificar quantos registros foram afetados
        cursor.execute("SELECT COUNT(*) FROM cadastro")
        total_registros = cursor.fetchone()[0]
        print(f"üìà Total de registros na tabela: {total_registros}")

        return True

    except sqlite3.Error as e:
        print(f"‚ùå Erro ao modificar banco de dados: {e}")
        return False

    finally:
        if conn:
            conn.close()


def create_backup():
    """Cria backup do banco antes da modifica√ß√£o"""
    db_path = 'cadastro.db'
    backup_path = f'cadastro_backup_{datetime.now().strftime("%Y%m%d_%H%M%S")}.db'

    try:
        import shutil
        shutil.copy2(db_path, backup_path)
        print(f"‚úÖ Backup criado: {backup_path}")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao criar backup: {e}")
        return False


if __name__ == "__main__":
    print("üîÑ Iniciando modifica√ß√£o do banco de dados...")
    print("üìã Adicionando campo 'atendida' na tabela cadastro")

    # Criar backup primeiro
    if create_backup():
        # Adicionar o campo
        if add_atendida_field():
            print("\n‚úÖ Modifica√ß√£o conclu√≠da com sucesso!")
            print("üîÑ Reinicie a aplica√ß√£o Flask para aplicar as mudan√ßas")
        else:
            print("\n‚ùå Falha na modifica√ß√£o do banco de dados")
    else:
        print("\n‚ùå Falha ao criar backup. Opera√ß√£o cancelada por seguran√ßa.")
