#!/usr/bin/env python3
"""
Script para testar o painel de TV de senhas
"""

import requests
import json
from datetime import datetime

def test_painel_tv():
    """Testa as APIs do painel de TV"""
    
    base_url = "http://127.0.0.1:5000"
    
    print("=" * 60)
    print("üß™ TESTE DO PAINEL DE TV DE SENHAS")
    print("=" * 60)
    
    # Teste 1: Acesso √† p√°gina do painel TV
    print("\n1. Testando acesso √† p√°gina do painel TV...")
    try:
        response = requests.get(f"{base_url}/senhas_tv")
        if response.status_code == 200:
            print("‚úÖ P√°gina do painel TV acess√≠vel")
        else:
            print(f"‚ùå Erro ao acessar p√°gina: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erro de conex√£o: {str(e)}")
    
    # Teste 2: API de senhas para TV
    print("\n2. Testando API de senhas para TV...")
    try:
        response = requests.get(f"{base_url}/api/tv/senhas")
        if response.status_code == 200:
            senhas = response.json()
            print(f"‚úÖ API de senhas funcionando - {len(senhas)} senhas encontradas")
            if senhas:
                print(f"   Primeira senha: {senhas[0]['senha']} - {senhas[0]['nome']}")
        else:
            print(f"‚ùå Erro na API de senhas: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erro de conex√£o: {str(e)}")
    
    # Teste 3: API de estat√≠sticas para TV
    print("\n3. Testando API de estat√≠sticas para TV...")
    try:
        response = requests.get(f"{base_url}/api/tv/estatisticas")
        if response.status_code == 200:
            stats = response.json()
            print("‚úÖ API de estat√≠sticas funcionando")
            print(f"   Total de senhas: {stats.get('total_senhas', 0)}")
            print(f"   Aguardando: {stats.get('por_status', {}).get('aguardando', 0)}")
            print(f"   Chamados: {stats.get('por_status', {}).get('chamados', 0)}")
            print(f"   Atendidos: {stats.get('por_status', {}).get('atendidos', 0)}")
        else:
            print(f"‚ùå Erro na API de estat√≠sticas: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erro de conex√£o: {str(e)}")
    
    # Teste 4: Verificar se as APIs s√£o p√∫blicas (sem autentica√ß√£o)
    print("\n4. Verificando se as APIs s√£o p√∫blicas...")
    try:
        # Teste sem cookies de sess√£o
        session = requests.Session()
        
        response = session.get(f"{base_url}/api/tv/senhas")
        if response.status_code == 200:
            print("‚úÖ API de senhas √© p√∫blica (sem autentica√ß√£o)")
        else:
            print(f"‚ùå API de senhas requer autentica√ß√£o: {response.status_code}")
        
        response = session.get(f"{base_url}/api/tv/estatisticas")
        if response.status_code == 200:
            print("‚úÖ API de estat√≠sticas √© p√∫blica (sem autentica√ß√£o)")
        else:
            print(f"‚ùå API de estat√≠sticas requer autentica√ß√£o: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Erro ao testar APIs p√∫blicas: {str(e)}")
    
    print("\n" + "=" * 60)
    print("üì∫ INSTRU√á√ïES PARA USAR O PAINEL DE TV")
    print("=" * 60)
    print("1. Abra o navegador em tela cheia")
    print("2. Acesse: http://127.0.0.1:5000/senhas_tv")
    print("3. Pressione F11 para modo tela cheia")
    print("4. O painel atualiza automaticamente a cada 10 segundos")
    print("5. Indicador verde no canto superior direito = conex√£o OK")
    print("6. Indicador vermelho = problema de conex√£o")
    print("\nüéØ CARACTER√çSTICAS DO PAINEL:")
    print("- Design otimizado para TV com letras grandes")
    print("- Sem bot√µes ou elementos de navega√ß√£o")
    print("- Atualiza√ß√£o autom√°tica em tempo real")
    print("- Cores diferentes por prioridade (Normal/Alta/Urgente)")
    print("- Estat√≠sticas em tempo real")
    print("- Rel√≥gio e data atualizados")
    print("=" * 60)

if __name__ == "__main__":
    test_painel_tv() 