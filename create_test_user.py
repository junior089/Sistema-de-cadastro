#!/usr/bin/env python3
"""
Script para criar um usu√°rio de teste para cadastro
"""

import os
import sys
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.app import app, db
from app.models.user import User
from app.models.estado import Estado
from app.models.municipio import Municipio
from app.models.descricao import Descricao
from app.models.instituicao import Instituicao
from app.models.atendente import Atendente

def create_test_data():
    """Cria dados de teste para o sistema"""
    
    with app.app_context():
        print("üîß CRIANDO DADOS DE TESTE")
        print("=" * 50)
        
        # 1. Criar usu√°rio de teste
        print("1. Criando usu√°rio de teste...")
        
        # Verificar se o usu√°rio j√° existe
        existing_user = User.query.filter_by(username='CADASTRADOR').first()
        if existing_user:
            print("   ‚úÖ Usu√°rio CADASTRADOR j√° existe")
        else:
            user = User(username='CADASTRADOR', role='cadastrador')
            user.password = '123456'
            db.session.add(user)
            db.session.commit()
            print("   ‚úÖ Usu√°rio CADASTRADOR criado com sucesso")
            print("   üìù Login: CADASTRADOR")
            print("   üìù Senha: 123456")
        
        # 2. Criar estados de teste
        print("\n2. Criando estados de teste...")
        
        estados_data = [
            {'nome': 'DISTRITO FEDERAL'},
            {'nome': 'GOI√ÅS'},
            {'nome': 'MINAS GERAIS'},
            {'nome': 'S√ÉO PAULO'},
            {'nome': 'RIO DE JANEIRO'}
        ]
        
        for estado_data in estados_data:
            existing_estado = Estado.query.filter_by(nome=estado_data['nome']).first()
            if not existing_estado:
                estado = Estado(nome=estado_data['nome'])
                db.session.add(estado)
                print(f"   ‚úÖ Estado {estado_data['nome']} criado")
            else:
                print(f"   ‚úÖ Estado {estado_data['nome']} j√° existe")
        
        db.session.commit()
        
        # 3. Criar munic√≠pios de teste
        print("\n3. Criando munic√≠pios de teste...")
        
        df_estado = Estado.query.filter_by(nome='DISTRITO FEDERAL').first()
        if df_estado:
            municipios_df = [
                'BRAS√çLIA',
                'CEIL√ÇNDIA',
                'TAGUATINGA',
                'SAMAMBAIA',
                'PLANALTINA'
            ]
            
            for municipio_nome in municipios_df:
                existing_municipio = Municipio.query.filter_by(
                    nome=municipio_nome, 
                    estado_id=df_estado.id
                ).first()
                
                if not existing_municipio:
                    municipio = Municipio(nome=municipio_nome, estado_id=df_estado.id)
                    db.session.add(municipio)
                    print(f"   ‚úÖ Munic√≠pio {municipio_nome} criado")
                else:
                    print(f"   ‚úÖ Munic√≠pio {municipio_nome} j√° existe")
        
        db.session.commit()
        
        # 4. Criar descri√ß√µes de teste
        print("\n4. Criando descri√ß√µes de teste...")
        
        descricoes_data = [
            'ASSIST√äNCIA T√âCNICA',
            'CR√âDITO RURAL',
            'REGULARIZA√á√ÉO FUNDI√ÅRIA',
            'INFRAESTRUTURA',
            'CAPACITA√á√ÉO'
        ]
        
        for descricao_nome in descricoes_data:
            existing_descricao = Descricao.query.filter_by(nome=descricao_nome).first()
            if not existing_descricao:
                descricao = Descricao(nome=descricao_nome)
                db.session.add(descricao)
                print(f"   ‚úÖ Descri√ß√£o {descricao_nome} criada")
            else:
                print(f"   ‚úÖ Descri√ß√£o {descricao_nome} j√° existe")
        
        db.session.commit()
        
        # 5. Criar institui√ß√µes de teste
        print("\n5. Criando institui√ß√µes de teste...")
        
        instituicoes_data = [
            'INCRA',
            'EMATER',
            'SEBRAE',
            'SENAR',
            'PREFEITURA'
        ]
        
        for instituicao_nome in instituicoes_data:
            existing_instituicao = Instituicao.query.filter_by(nome=instituicao_nome).first()
            if not existing_instituicao:
                instituicao = Instituicao(nome=instituicao_nome)
                db.session.add(instituicao)
                print(f"   ‚úÖ Institui√ß√£o {instituicao_nome} criada")
            else:
                print(f"   ‚úÖ Institui√ß√£o {instituicao_nome} j√° existe")
        
        db.session.commit()
        
        # 6. Criar atendentes de teste
        print("\n6. Criando atendentes de teste...")
        
        atendentes_data = [
            'MARIA SILVA',
            'JO√ÉO SANTOS',
            'ANA COSTA',
            'PEDRO OLIVEIRA',
            'LUCIA FERREIRA'
        ]
        
        for atendente_nome in atendentes_data:
            existing_atendente = Atendente.query.filter_by(nome=atendente_nome).first()
            if not existing_atendente:
                atendente = Atendente(nome=atendente_nome)
                db.session.add(atendente)
                print(f"   ‚úÖ Atendente {atendente_nome} criado")
            else:
                print(f"   ‚úÖ Atendente {atendente_nome} j√° existe")
        
        db.session.commit()
        
        print("\n" + "=" * 50)
        print("‚úÖ DADOS DE TESTE CRIADOS COM SUCESSO!")
        print("\nüìã RESUMO:")
        print("   üë§ Usu√°rio: CADASTRADOR")
        print("   üîë Senha: 123456")
        print("   üéØ Role: cadastrador")
        print("\nüåê Para testar:")
        print("   1. Acesse: http://127.0.0.1:5000")
        print("   2. Fa√ßa login com: CADASTRADOR / 123456")
        print("   3. Clique em 'Cadastrar' no menu")
        print("   4. Preencha o formul√°rio e clique em 'Cadastrar'")
        print("\n" + "=" * 50)

if __name__ == "__main__":
    create_test_data() 