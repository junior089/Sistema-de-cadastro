#!/usr/bin/env python3
"""
Script para adicionar cadastros de teste com senhas
"""

import os
import sys
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.app import app, db
from app.models.cadastro import Cadastro
from app.models.user import User
from app.models.estado import Estado
from app.models.municipio import Municipio
from app.models.descricao import Descricao
from app.models.instituicao import Instituicao
from datetime import datetime

def adicionar_senhas_teste():
    """Adiciona cadastros de teste com senhas"""
    
    with app.app_context():
        print("üîß ADICIONANDO SENHAS DE TESTE")
        print("=" * 50)
        
        # Verificar se j√° existem cadastros
        cadastros_existentes = Cadastro.query.count()
        if cadastros_existentes > 0:
            print(f"‚ö†Ô∏è  J√° existem {cadastros_existentes} cadastros no sistema")
            print("   Pulando cria√ß√£o de cadastros de teste...")
            return
        
        # Buscar dados necess√°rios
        print("1. Buscando dados de refer√™ncia...")
        
        # Buscar ou criar estado
        estado = Estado.query.first()
        if not estado:
            estado = Estado(nome="Distrito Federal")
            db.session.add(estado)
            db.session.commit()
            print("   ‚úÖ Estado criado: Distrito Federal")
        
        # Buscar ou criar munic√≠pio
        municipio = Municipio.query.filter_by(estado_id=estado.id).first()
        if not municipio:
            municipio = Municipio(nome="Bras√≠lia", estado_id=estado.id)
            db.session.add(municipio)
            db.session.commit()
            print("   ‚úÖ Munic√≠pio criado: Bras√≠lia")
        
        # Buscar ou criar descri√ß√£o
        descricao = Descricao.query.first()
        if not descricao:
            descricao = Descricao(nome="Consulta Geral")
            db.session.add(descricao)
            db.session.commit()
            print("   ‚úÖ Descri√ß√£o criada: Consulta Geral")
        
        # Buscar ou criar institui√ß√£o
        instituicao = Instituicao.query.first()
        if not instituicao:
            instituicao = Instituicao(nome="INCRA")
            db.session.add(instituicao)
            db.session.commit()
            print("   ‚úÖ Institui√ß√£o criada: INCRA")
        
        # Buscar usu√°rio para ser atendente
        atendente = User.query.first()
        if not atendente:
            print("   ‚ùå Nenhum usu√°rio encontrado para ser atendente")
            return
        
        print("2. Criando cadastros de teste...")
        
        # Lista de cadastros de teste
        cadastros_teste = [
            {
                'nome': 'Maria Silva Santos',
                'cpf': '12345678901',
                'telefone': '61992445034',
                'assentamento': 'Assentamento Boa Vista',
                'prioridade': 0,
                'observacoes': 'Primeira consulta'
            },
            {
                'nome': 'Ana Oliveira Costa',
                'cpf': '98765432109',
                'telefone': '61987654321',
                'assentamento': 'Assentamento Santa Maria',
                'prioridade': 1,
                'observacoes': 'Prioridade alta - Documenta√ß√£o urgente'
            },
            {
                'nome': 'Joana Pereira Lima',
                'cpf': '45678912345',
                'telefone': '61955556666',
                'assentamento': 'Assentamento Nova Esperan√ßa',
                'prioridade': 2,
                'observacoes': 'URGENTE - Problema com terra'
            },
            {
                'nome': 'Lucia Ferreira Rodrigues',
                'cpf': '78912345678',
                'telefone': '61977778888',
                'assentamento': 'Assentamento S√£o Jo√£o',
                'prioridade': 0,
                'observacoes': 'Consulta regular'
            },
            {
                'nome': 'Rosa Almeida Souza',
                'cpf': '32165498732',
                'telefone': '61999990000',
                'assentamento': 'Assentamento Cidade Nova',
                'prioridade': 1,
                'observacoes': 'Prioridade alta - Benef√≠cios'
            }
        ]
        
        cadastros_criados = 0
        
        for i, dados in enumerate(cadastros_teste, 1):
            try:
                # Criar cadastro
                cadastro = Cadastro(
                    data_hora=datetime.now(),
                    nome=dados['nome'],
                    cpf=dados['cpf'],
                    telefone=dados['telefone'],
                    assentamento=dados['assentamento'],
                    municipio_id=municipio.id,
                    estado_id=estado.id,
                    descricao_id=descricao.id,
                    instituicao_id=instituicao.id,
                    atendente_id=atendente.id,
                    observacoes=dados['observacoes']
                )
                
                # Gerar senha
                cadastro.gerar_senha_chamada()
                
                # Definir prioridade
                cadastro.definir_prioridade(dados['prioridade'], dados['observacoes'])
                
                # Entrar na fila
                cadastro.entrar_fila()
                
                db.session.add(cadastro)
                db.session.commit()
                
                cadastros_criados += 1
                print(f"   ‚úÖ Cadastro {i}: {dados['nome']} - Senha: {cadastro.senha_chamada}")
                
            except Exception as e:
                db.session.rollback()
                print(f"   ‚ùå Erro ao criar cadastro {i}: {str(e)}")
        
        print(f"\nüéâ {cadastros_criados} cadastros de teste criados com sucesso!")
        print("üìã Senhas geradas:")
        
        # Listar todas as senhas criadas
        senhas = Cadastro.query.filter(Cadastro.senha_chamada.isnot(None)).all()
        for senha in senhas:
            prioridade_texto = ['NORMAL', 'ALTA', 'URGENTE'][senha.prioridade]
            print(f"   üé´ {senha.senha_chamada} - {senha.nome} ({prioridade_texto})")

if __name__ == "__main__":
    try:
        adicionar_senhas_teste()
        print("\n‚úÖ Script de senhas de teste conclu√≠do!")
    except Exception as e:
        print(f"‚ùå Erro: {str(e)}")
        sys.exit(1) 